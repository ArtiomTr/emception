diff --git a/Makefile b/Makefile
index 7e72eb4..b6c6f24 100644
--- a/Makefile
+++ b/Makefile
@@ -54,18 +54,7 @@ build/pyodide.asm.js: \
 		-lidbfs.js \
 		-lnodefs.js \
 		-lproxyfs.js \
-		-lworkerfs.js \
-		--preload-file $(CPYTHONLIB)@/lib/python$(PYMAJOR).$(PYMINOR) \
-		--preload-file src/webbrowser.py@/lib/python$(PYMAJOR).$(PYMINOR)/webbrowser.py \
-		--preload-file src/_testcapi.py@/lib/python$(PYMAJOR).$(PYMINOR)/_testcapi.py \
-		--preload-file src/_testinternalcapi.py@/lib/python$(PYMAJOR).$(PYMINOR)/_testinternalcapi.py \
-		--preload-file src/pystone.py@/lib/python$(PYMAJOR).$(PYMINOR)/pystone.py \
-		--preload-file src/py/pyodide@/lib/python$(PYMAJOR).$(PYMINOR)/site-packages/pyodide \
-		--preload-file src/py/_pyodide@/lib/python$(PYMAJOR).$(PYMINOR)/site-packages/_pyodide \
-		--exclude-file "*__pycache__*" \
-		--exclude-file "*/test/*" \
-		--exclude-file "*/tests/*" \
-		--exclude-file "*/distutils/*"
+		-lworkerfs.js
    # Strip out C++ symbols which all start __Z.
    # There are 4821 of these and they have VERY VERY long names.
    # To show some stats on the symbols you can use the following:
diff --git a/src/js/api.js b/src/js/api.js
index 50a867f..8b50673 100644
--- a/src/js/api.js
+++ b/src/js/api.js
@@ -1,7 +1,7 @@
 import { Module } from "./module.js";
-import { loadPackage, loadedPackages } from "./load-pyodide.js";
+import /*{ loadPackage, loadedPackages } from*/ "./load-pyodide.js";
 import { isPyProxy, PyBuffer } from "./pyproxy.gen.js";
-export { loadPackage, loadedPackages, isPyProxy };
+export { /* loadPackage, loadedPackages, */ isPyProxy };
 
 /**
  * @typedef {import('./pyproxy.gen').Py2JsResult} Py2JsResult
@@ -122,6 +122,7 @@ Module.runPython = runPython;
  * :any:`pyodide.loadPackage` (optional).
  * @async
  */
+/*
 export async function loadPackagesFromImports(
   code,
   messageCallback,
@@ -149,6 +150,7 @@ export async function loadPackagesFromImports(
     await loadPackage(Array.from(packages), messageCallback, errorCallback);
   }
 }
+*/
 
 /**
  * Runs Python code using `PyCF_ALLOW_TOP_LEVEL_AWAIT
@@ -348,9 +350,9 @@ export function makePublicAPI() {
     FS,
     pyodide_py,
     version,
-    loadPackage,
-    loadPackagesFromImports,
-    loadedPackages,
+    // loadPackage,
+    // loadPackagesFromImports,
+    // loadedPackages,
     isPyProxy,
     runPython,
     runPythonAsync,
diff --git a/src/js/pyodide.js b/src/js/pyodide.js
index 338f0e1..3f68784 100644
--- a/src/js/pyodide.js
+++ b/src/js/pyodide.js
@@ -2,11 +2,11 @@
  * The main bootstrap code for loading pyodide.
  */
 import { Module, setStandardStreams } from "./module.js";
-import {
+import /*{
   loadScript,
   initializePackageIndex,
   loadPackage,
-} from "./load-pyodide.js";
+} from*/ "./load-pyodide.js";
 import { makePublicAPI, registerJsModule } from "./api.js";
 import "./pyproxy.gen.js";
 
@@ -191,6 +191,7 @@ export async function loadPyodide(config) {
     stdin: globalThis.prompt ? globalThis.prompt : undefined,
   };
   config = Object.assign(default_config, config);
+  /*
   if (globalThis.__pyodide_module) {
     if (globalThis.languagePluginURL) {
       throw new Error(
@@ -213,14 +214,17 @@ export async function loadPyodide(config) {
   }
   Module.indexURL = baseURL;
   let packageIndexReady = initializePackageIndex(baseURL);
+  */
 
   setStandardStreams(config.stdin, config.stdout, config.stderr);
 
-  Module.locateFile = (path) => baseURL + path;
+  Module.locateFile = (path) => "/" + path;
   let moduleLoaded = new Promise((r) => (Module.postRun = r));
 
+  /*
   const scriptSrc = `${baseURL}pyodide.asm.js`;
   await loadScript(scriptSrc);
+  */
 
   // _createPyodideModule is specified in the Makefile by the linker flag:
   // `-s EXPORT_NAME="'_createPyodideModule'"`
@@ -268,11 +272,12 @@ def temp(pyodide_js, Module, jsglobals):
   pyodide.pyodide_py = Module.pyodide_py;
   pyodide.version = Module.version;
 
+  /*
   await packageIndexReady;
   if (config.fullStdLib) {
     await loadPackage(["distutils"]);
   }
+  */
 
   return pyodide;
 }
-globalThis.loadPyodide = loadPyodide;
